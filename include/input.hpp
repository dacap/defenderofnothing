// Defender Of Nothing
// Copyright (C) 2007 by David A. Capello
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in
//   the documentation and/or other materials provided with the
//   distribution.
// * Neither the name of the Vaca nor the names of its contributors
//   may be used to endorse or promote products derived from this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef INPUT_HPP
#define INPUT_HPP


#define SUPPORTED_JOYSTICKS 4

#define INPUT_JOYSTICK_STICK(joy,stk)			\
    INPUT_JOY##joy##_STICK##stk##_AXIS0_D1,		\
    INPUT_JOY##joy##_STICK##stk##_AXIS0_D2,		\
    INPUT_JOY##joy##_STICK##stk##_AXIS1_D1,		\
    INPUT_JOY##joy##_STICK##stk##_AXIS1_D2,		\
    INPUT_JOY##joy##_STICK##stk##_AXIS2_D1,		\
    INPUT_JOY##joy##_STICK##stk##_AXIS2_D2
#define INPUT_JOYSTICK(joy)			\
    INPUT_JOYSTICK_STICK(joy, 0),		\
    INPUT_JOYSTICK_STICK(joy, 1),		\
    INPUT_JOYSTICK_STICK(joy, 2),		\
    INPUT_JOYSTICK_STICK(joy, 3),		\
    INPUT_JOY##joy##_BUTTON0,			\
    INPUT_JOY##joy##_BUTTON1,			\
    INPUT_JOY##joy##_BUTTON2,			\
    INPUT_JOY##joy##_BUTTON3,			\
    INPUT_JOY##joy##_BUTTON4,			\
    INPUT_JOY##joy##_BUTTON5,			\
    INPUT_JOY##joy##_BUTTON6,			\
    INPUT_JOY##joy##_BUTTON7,			\
    INPUT_JOY##joy##_BUTTON8,			\
    INPUT_JOY##joy##_BUTTON9,			\
    INPUT_JOY##joy##_BUTTON10,			\
    INPUT_JOY##joy##_BUTTON11,			\
    INPUT_JOY##joy##_BUTTON12,			\
    INPUT_JOY##joy##_BUTTON13,			\
    INPUT_JOY##joy##_BUTTON14,			\
    INPUT_JOY##joy##_BUTTON15


enum {
  INPUT_KEY_A = KEY_A,
  INPUT_KEY_B = KEY_B,
  INPUT_KEY_C = KEY_C,
  INPUT_KEY_D = KEY_D,
  INPUT_KEY_E = KEY_E,
  INPUT_KEY_F = KEY_F,
  INPUT_KEY_G = KEY_G,
  INPUT_KEY_H = KEY_H,
  INPUT_KEY_I = KEY_I,
  INPUT_KEY_J = KEY_J,
  INPUT_KEY_K = KEY_K,
  INPUT_KEY_L = KEY_L,
  INPUT_KEY_M = KEY_M,
  INPUT_KEY_N = KEY_N,
  INPUT_KEY_O = KEY_O,
  INPUT_KEY_P = KEY_P,
  INPUT_KEY_Q = KEY_Q,
  INPUT_KEY_R = KEY_R,
  INPUT_KEY_S = KEY_S,
  INPUT_KEY_T = KEY_T,
  INPUT_KEY_U = KEY_U,
  INPUT_KEY_V = KEY_V,
  INPUT_KEY_W = KEY_W,
  INPUT_KEY_X = KEY_X,
  INPUT_KEY_Y = KEY_Y,
  INPUT_KEY_Z = KEY_Z,
  INPUT_KEY_0 = KEY_0,
  INPUT_KEY_1 = KEY_1,
  INPUT_KEY_2 = KEY_2,
  INPUT_KEY_3 = KEY_3,
  INPUT_KEY_4 = KEY_4,
  INPUT_KEY_5 = KEY_5,
  INPUT_KEY_6 = KEY_6,
  INPUT_KEY_7 = KEY_7,
  INPUT_KEY_8 = KEY_8,
  INPUT_KEY_9 = KEY_9,
  INPUT_KEY_0_PAD = KEY_0_PAD,
  INPUT_KEY_1_PAD = KEY_1_PAD,
  INPUT_KEY_2_PAD = KEY_2_PAD,
  INPUT_KEY_3_PAD = KEY_3_PAD,
  INPUT_KEY_4_PAD = KEY_4_PAD,
  INPUT_KEY_5_PAD = KEY_5_PAD,
  INPUT_KEY_6_PAD = KEY_6_PAD,
  INPUT_KEY_7_PAD = KEY_7_PAD,
  INPUT_KEY_8_PAD = KEY_8_PAD,
  INPUT_KEY_9_PAD = KEY_9_PAD,
  INPUT_KEY_F1 = KEY_F1,
  INPUT_KEY_F2 = KEY_F2,
  INPUT_KEY_F3 = KEY_F3,
  INPUT_KEY_F4 = KEY_F4,
  INPUT_KEY_F5 = KEY_F5,
  INPUT_KEY_F6 = KEY_F6,
  INPUT_KEY_F7 = KEY_F7,
  INPUT_KEY_F8 = KEY_F8,
  INPUT_KEY_F9 = KEY_F9,
  INPUT_KEY_F10 = KEY_F10,
  INPUT_KEY_F11 = KEY_F11,
  INPUT_KEY_F12 = KEY_F12,
  INPUT_KEY_ESC = KEY_ESC,
  INPUT_KEY_TILDE = KEY_TILDE,
  INPUT_KEY_MINUS = KEY_MINUS,
  INPUT_KEY_EQUALS = KEY_EQUALS,
  INPUT_KEY_BACKSPACE = KEY_BACKSPACE,
  INPUT_KEY_TAB = KEY_TAB,
  INPUT_KEY_OPENBRACE = KEY_OPENBRACE,
  INPUT_KEY_CLOSEBRACE = KEY_CLOSEBRACE,
  INPUT_KEY_ENTER = KEY_ENTER,
  INPUT_KEY_COLON = KEY_COLON,
  INPUT_KEY_QUOTE = KEY_QUOTE,
  INPUT_KEY_BACKSLASH = KEY_BACKSLASH,
  INPUT_KEY_BACKSLASH2 = KEY_BACKSLASH2,
  INPUT_KEY_COMMA = KEY_COMMA,
  INPUT_KEY_STOP = KEY_STOP,
  INPUT_KEY_SLASH = KEY_SLASH,
  INPUT_KEY_SPACE = KEY_SPACE,
  INPUT_KEY_INSERT = KEY_INSERT,
  INPUT_KEY_DEL = KEY_DEL,
  INPUT_KEY_HOME = KEY_HOME,
  INPUT_KEY_END = KEY_END,
  INPUT_KEY_PGUP = KEY_PGUP,
  INPUT_KEY_PGDN = KEY_PGDN,
  INPUT_KEY_LEFT = KEY_LEFT,
  INPUT_KEY_RIGHT = KEY_RIGHT,
  INPUT_KEY_UP = KEY_UP,
  INPUT_KEY_DOWN = KEY_DOWN,
  INPUT_KEY_SLASH_PAD = KEY_SLASH_PAD,
  INPUT_KEY_ASTERISK = KEY_ASTERISK,
  INPUT_KEY_MINUS_PAD = KEY_MINUS_PAD,
  INPUT_KEY_PLUS_PAD = KEY_PLUS_PAD,
  INPUT_KEY_DEL_PAD = KEY_DEL_PAD,
  INPUT_KEY_ENTER_PAD = KEY_ENTER_PAD,
  INPUT_KEY_PRTSCR = KEY_PRTSCR,
  INPUT_KEY_PAUSE = KEY_PAUSE,
  INPUT_KEY_ABNT_C1 = KEY_ABNT_C1,
  INPUT_KEY_YEN = KEY_YEN,
  INPUT_KEY_KANA = KEY_KANA,
  INPUT_KEY_CONVERT = KEY_CONVERT,
  INPUT_KEY_NOCONVERT = KEY_NOCONVERT,
  INPUT_KEY_AT = KEY_AT,
  INPUT_KEY_CIRCUMFLEX = KEY_CIRCUMFLEX,
  INPUT_KEY_COLON2 = KEY_COLON2,
  INPUT_KEY_KANJI = KEY_KANJI,
  INPUT_KEY_EQUALS_PAD = KEY_EQUALS_PAD,
  INPUT_KEY_BACKQUOTE = KEY_BACKQUOTE,
  INPUT_KEY_SEMICOLON = KEY_SEMICOLON,
  INPUT_KEY_COMMAND = KEY_COMMAND,
  INPUT_KEY_UNKNOWN1 = KEY_UNKNOWN1,
  INPUT_KEY_UNKNOWN2 = KEY_UNKNOWN2,
  INPUT_KEY_UNKNOWN3 = KEY_UNKNOWN3,
  INPUT_KEY_UNKNOWN4 = KEY_UNKNOWN4,
  INPUT_KEY_UNKNOWN5 = KEY_UNKNOWN5,
  INPUT_KEY_UNKNOWN6 = KEY_UNKNOWN6,
  INPUT_KEY_UNKNOWN7 = KEY_UNKNOWN7,
  INPUT_KEY_UNKNOWN8 = KEY_UNKNOWN8,
  INPUT_KEY_LSHIFT = KEY_LSHIFT,
  INPUT_KEY_RSHIFT = KEY_RSHIFT,
  INPUT_KEY_LCONTROL = KEY_LCONTROL,
  INPUT_KEY_RCONTROL = KEY_RCONTROL,
  INPUT_KEY_ALT = KEY_ALT,
  INPUT_KEY_ALTGR = KEY_ALTGR,
  INPUT_KEY_LWIN = KEY_LWIN,
  INPUT_KEY_RWIN = KEY_RWIN,
  INPUT_KEY_MENU = KEY_MENU,
  INPUT_KEY_SCRLOCK = KEY_SCRLOCK,
  INPUT_KEY_NUMLOCK = KEY_NUMLOCK,
  INPUT_KEY_CAPSLOCK = KEY_CAPSLOCK,

  // joysticks
  INPUT_JOYSTICK(0),
  INPUT_JOYSTICK(1),
  INPUT_JOYSTICK(2),
  INPUT_JOYSTICK(3),

  // limits
  INPUT_KEY_FIRST = INPUT_KEY_A,
  INPUT_KEY_LAST = INPUT_KEY_CAPSLOCK,
  INPUT_JOY_FIRST = INPUT_JOY0_STICK0_AXIS0_D1,
  INPUT_JOY_LAST = INPUT_JOY3_BUTTON15,
  INPUT_JOY0_FIRST = INPUT_JOY0_STICK0_AXIS0_D1,
  INPUT_JOY0_LAST = INPUT_JOY0_BUTTON15,
  INPUT_JOY1_FIRST = INPUT_JOY1_STICK0_AXIS0_D1,
  INPUT_JOY1_LAST = INPUT_JOY1_BUTTON15,
  INPUT_JOY2_FIRST = INPUT_JOY2_STICK0_AXIS0_D1,
  INPUT_JOY2_LAST = INPUT_JOY2_BUTTON15,
  INPUT_JOY3_FIRST = INPUT_JOY3_STICK0_AXIS0_D1,
  INPUT_JOY3_LAST = INPUT_JOY3_BUTTON15,
};


class Input
{
  int m_left;
  int m_right;
  int m_up;
  int m_down;
  int m_fire;
  int m_target;
  int m_demonize;

public:
  Input();
  virtual ~Input();

  bool left();
  bool right();
  bool up();
  bool down();
  bool fire();
  bool target();
  bool demonize();

  static int wait_input();

private:
  static bool check_input_state(int input_id);
};


extern Input *the_input;


#endif // INPUT_HPP
